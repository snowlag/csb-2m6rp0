{"version":3,"sources":["ErrorBoundary.js","components/Models/building.js","components/textures/road_texture.jpg","components/algorithms/helpers.js","components/algorithms/weightedSearchAlgorithm.js","components/algorithms/mazeAlgorithms.js","components/Grid.js","components/algorithms/unweightedSearchAlgorithm.js","components/Floor.js","components/Controls.js","assets/info.svg","assets/settings.svg","components/Settings.js","components/World.js","App.js","reportWebVitals.js","index.js"],"names":["React","Component","Scene","props","useState","geometry","setGeometry","gltf","useLoader","GLTFLoader","scene","clone","primitiveProps","object","position","fallback","scale","tweenToColor","node","colors","a","duration","options","i","length","TWEEN","Tween","faces","color","to","onUpdate","colorsNeedUpdate","delay","start","facesIndices","forEach","indices","vertices","y","verticesNeedUpdate","weightedSearchAlgorithm","grid","target","nodesToAnimate","name","heuristic","distance","direction","totalDistance","unvisitedNodes","nodes","row","push","getAllNodes","currentNode","closestNode","status","Infinity","id","updateNeighbors","currentClosest","index","heuristicDistance","splice","neighbors","col","filter","neighbor","stutus","getNeighbors","updateNode","targetNode","actualStartNode","actualTargetNode","distanceToCompare","nodeOne","nodeTwo","x1","y1","x2","y2","getDistance","weight","manhattanDistance","Math","pow","previousNode","path","nodeOneCoordinates","nodeTwoCoordinates","abs","recursiveDivisionMaze","rowStart","rowEnd","colStart","colEnd","orientation","surroundingWalls","type","reservedStatus","j","converNodeToType","possibleRows","number","possibleCols","randomRowIndex","floor","random","randomColIndex","currentRow","colRandom","currentCol","rowRandom","includes","changeOnesPlaceTo5","Grid","groundMaterial","previousHoverNodeId","currentHoverNodeId","mouseDownX","mouseDownY","mouseIsUp","GRID_SIZE","gridDimensions","THREE","groundGeometry","selectedAlgorithm","selectedMazeAlgorithm","runState","worldProperties","clearTheWalls","clearWalls","clearThePath","clearPath","algorithmSpeed","applyingSettings","visualizeThePolicy","visualizeOptimalPolicy","useThree","camera","blocks","setBlocks","useEffect","terrain","settingsConfig","startRow","startCol","onceSpecial","finishRow","finishCol","reward","default","finishApplyingSettings","resetTerrainConfig","currentState","policyList","maxAction","chooseAction","policyCuriosity","action_dy","actions","action_dx","nextState","optimalPolicy","calculateOptimalPolicy","headRow","headCol","tailRow","tailCol","head","tail","setTimeout","undefined","r","g","b","animateOptimalPolicy","finishedOptimalPolicy","processedSuccessfuly","startNode","finishNode","finish","algorithm","console","log","structure","exploredNodes","shift","pop","currentNeighbors","unshift","unweightedSearchAlgorithm","nodesInShortestPathOrder","getNodesInShortestPathOrder","visitedNodesInOrder","timerDelay","updateRunState","animateShortestPath","visited","animateAlgorithm","visualizeAlgorithm","randomMaze","animateMaze","loader","useMemo","load","road","texture","wrapS","wrapT","repeat","x","map","side","vertexColors","receiveShadow","mesh","useRef","tempGrid","createNode","renderLoop","initializeGrid","states","tempStateGrid","rows","cols","initStates","q_table","Array","fill","records","left","down","right","up","discountFactor","alpha","faceIndex","positionVectorX","positionVectorZ","qValue","visits","posX","posY","posXRounded","posZRounded","window","requestAnimationFrame","nodeRow","nodeCol","RemoveWallBlockByCoordinates","AddWallBlockByCoordinates","wall","hoverLoop","update","z","pos","visible","oldBlocks","block","mouseUpHandler","event","clientX","clientY","nodeId","linearIndex","findNodeId","e_greedy","require","rwc","selectedAction","actionChange","isValidState","policyCandidates","action","maxQValue","Number","Object","keys","reduce","v","max","maxState","listOfMax","maxCandidate","tempVals","split","stopClearWalls","removeAll","stopClearPath","newblocks","posZ","stopMazeSelection","ref","args","rotation","PI","onPointerDown","e","onPointerUp","resetStatus","onPointerMove","attach","onClick","Floor","Controls","controls","easing","Easing","Exponential","Out","onComplete","current","enableRotate","Settings","World","width","innerWidth","height","innerHeigh","setSelectedAlgorithm","setRunState","resetCamera","setResetCamera","setClearWalls","setClearPath","cameraPosition","setSelectedMazeAlgorithm","setAlgorithmSpeed","selected_algo_is_undefined","setAlgo","setApplyingSettings","epochs","learningRate","agentCuriosity","setVisualizeOptimalPolicy","classes","makeStyles","theme","root","background","border","borderRadius","useStyles","className","align","Select","displayEmpty","onChange","value","MenuItem","WhatsApp","size","disabled","loadingLabel","resultLabel","ripple","element","next","colorManagement","fov","aspect","near","far","intensity","groundColor","castShadow","newState","nodeDimensions","updateResetStatus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.654ff937.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    console.log(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\nexport default ErrorBoundary;\n","import { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport ErrorBoundary from \"../../ErrorBoundary\";\nimport { Suspense, useEffect, useRef, useState } from \"react\";\n\nexport default function Scene(props) {\n  const [geometry, setGeometry] = useState();\n  var gltf = useLoader(GLTFLoader, \"/models/GLTFModels/ApartmentBuilding.glb\");\n  if (!geometry) {\n    const scene = gltf.scene.clone(true); // so we can instantiate multiple copies of this geometry\n    setGeometry(scene);\n  }\n\n  const primitiveProps = {\n    object: geometry,\n    position: props.position,\n  };\n\n  const LoadingScreen = () => {\n    return (\n      <>\n        <div>Loading Model</div>\n      </>\n    );\n  };\n  return (\n    <Suspense fallback={LoadingScreen}>\n      <primitive scale={[0.025, 0.025, 0.015]} {...primitiveProps} />\n    </Suspense>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/road_texture.2571a4c2.jpg\";","import TWEEN from \"@tweenjs/tween.js\";\n\nexport function getAllNodes(grid) {\n\tconst nodes = [];\n\tfor (const row of grid) {\n\t\tnodes.push(...row);\n\t}\n\treturn nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n\tconst nodesInShortestPathOrder = [];\n\tlet currentNode = finishNode;\n\t//Excluding finish node\n\tif(currentNode.previousNode !== null) {\n\t\tcurrentNode = currentNode.previousNode;\n\t}\n\twhile (currentNode !== null) {\n\t\t// Excluding start node\n\t\tif(currentNode.previousNode === null) {\n\t\t\tbreak;\n\t\t}\n\t\tnodesInShortestPathOrder.unshift(currentNode);\n\t\tcurrentNode = currentNode.previousNode;\n\t}\n\n\treturn nodesInShortestPathOrder;\n}\n\nexport async function tweenToColor(node, geometry, colors, duration = 300, options) {\n\tfor(let i=0; i<colors.length; i++) {\n\t\t//console.log(node);\n\t\tnew TWEEN.Tween(node.faces[1].color)\n\t\t\t.to(colors[i], duration)\n\t\t\t.onUpdate(() => {\n\t\t\t\tgeometry.colorsNeedUpdate = true;\n\t\t\t})\n\t\t\t.delay(i*200)\n\t\t\t.start();\n\t\tnew TWEEN.Tween(node.faces[2].color)\n\t\t\t.to(colors[i], duration)\n\t\t\t.onUpdate(() => {\n\t\t\t\tgeometry.colorsNeedUpdate = true;\n\t\t\t})\n\t\t\t.delay(i*200)\n\t\t\t.start();\n\t}\n\tif (options) {\n\t\tif (options.position) {\n\t\t\tvar facesIndices = [\"a\", \"b\", \"c\"];\n\t\t\tfacesIndices.forEach(function (indices) {\n\t\t\t\tnew TWEEN.Tween(geometry.vertices[node.faces[1][indices]])\n\t\t\t\t\t.to({ y: 0.5 }, duration)\n\t\t\t\t\t.onUpdate(() => {\n\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\n\t\t\t\t\t})\n\t\t\t\t\t.start();\n\t\t\t\tnew TWEEN.Tween(geometry.vertices[node.faces[2][indices]])\n\t\t\t\t\t.to({ y: 0.5 }, duration)\n\t\t\t\t\t.onUpdate(() => {\n\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\n\t\t\t\t\t})\n\t\t\t\t\t.start();\n\t\t\t});\n\t\t\tfacesIndices.forEach(function (indices) {\n\t\t\t\tnew TWEEN.Tween(geometry.vertices[node.faces[1][indices]])\n\t\t\t\t\t.to({ y: 0 }, duration)\n\t\t\t\t\t.onUpdate(() => {\n\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\n\t\t\t\t\t})\n\t\t\t\t\t.delay(100)\n\t\t\t\t\t.start();\n\t\t\t\tnew TWEEN.Tween(geometry.vertices[node.faces[2][indices]])\n\t\t\t\t\t.to({ y: 0 }, duration)\n\t\t\t\t\t.onUpdate(() => {\n\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\n\t\t\t\t\t})\n\t\t\t\t\t.delay(100)\n\t\t\t\t\t.start();\n\t\t\t});\n\t\t}\n\t}\n}","import { getAllNodes } from './helpers.js';\n\nexport function weightedSearchAlgorithm(grid, start, target, nodesToAnimate, name, heuristic) {\n  // Initialze nodes\n\tstart.distance = 0;\n\tstart.direction = \"right\";\n\tif(name === \"aStar\") {\n\t\tstart.totalDistance = 0;\n\t}\n\t// Should be a Priority Queue\n  let unvisitedNodes = getAllNodes(grid);\n  while (unvisitedNodes.length) {\n        let currentNode = closestNode(unvisitedNodes, name);\n    while (currentNode.status === \"wall\" && unvisitedNodes.length) {\n        currentNode = closestNode(unvisitedNodes, name)\n    }\n    if (currentNode.distance === Infinity) return false;\n    nodesToAnimate.push(currentNode);\n    //if(currentNode.status !== \"start\" && currentNode.status !== \"finish\"){\n      currentNode.status = \"visited\";\n    //}\n    // Ending condition\n\t\tif (currentNode.id === target.id) return \"success!\";\n\t\t// Updating neighbors\n    if (name === \"CLA\" || name === \"greedy\" || name === \"aStar\") {\n      updateNeighbors(grid, currentNode, start, target, name, heuristic);\n    } else if (name === \"Dijkstra\") {\n      updateNeighbors(grid, currentNode);\n    }\n  }\n}\n\nfunction closestNode(unvisitedNodes, name) {\n  let currentClosest, index;\n  for (let i = 0; i < unvisitedNodes.length; i++) {\n\t\tif(name === \"aStar\") {\n\t\t\tif (!currentClosest || currentClosest.totalDistance > unvisitedNodes[i].totalDistance) {\n\t\t\t\tcurrentClosest = unvisitedNodes[i];\n\t\t\t\tindex = i;\n\t\t\t} else if (currentClosest.totalDistance === unvisitedNodes[i].totalDistance) {\n\t\t\t\tif (currentClosest.heuristicDistance > unvisitedNodes[i].heuristicDistance) {\n\t\t\t\t\tcurrentClosest = unvisitedNodes[i];\n\t\t\t\t\tindex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!currentClosest || currentClosest.distance > unvisitedNodes[i].distance) {\n\t\t\t\tcurrentClosest = unvisitedNodes[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n  }\n  unvisitedNodes.splice(index, 1);\n  return currentClosest;\n}\n\nfunction updateNeighbors(grid, node, start, target, name, heuristic) {\n  let neighbors = getNeighbors(node, grid);\n  for (let neighbor of neighbors) {\n    if (target) {\n      updateNode(node, neighbor, start, target, name, heuristic);\n    } else {\n      updateNode(node, neighbor);\n    }\n  }\n}\n\n\n\nfunction updateNode(currentNode, targetNode, actualStartNode, actualTargetNode, name, heuristic) {\n  let distance = getDistance(currentNode, targetNode);\n  let distanceToCompare;\n  if (actualTargetNode && name === \"CLA\") {\n    let weight = targetNode.weight === 15 ? 15 : 1;\n    if (heuristic === \"manhattanDistance\") {\n      distanceToCompare = currentNode.distance + (distance[0] + weight) * manhattanDistance(targetNode, actualTargetNode);\n    } else if (heuristic === \"poweredManhattanDistance\") {\n      distanceToCompare = currentNode.distance + targetNode.weight + distance[0] + Math.pow(manhattanDistance(targetNode, actualTargetNode), 2);\n    } else if (heuristic === \"extraPoweredManhattanDistance\") {\n      distanceToCompare = currentNode.distance + (distance[0] + weight) * Math.pow(manhattanDistance(targetNode, actualTargetNode), 7);\n    }\n  } else if (actualTargetNode && name === \"greedy\") {\n    distanceToCompare = targetNode.weight + distance[0] + manhattanDistance(targetNode, actualTargetNode);\n  } else if(name === \"aStar\") {\n\t\tif (!targetNode.heuristicDistance) targetNode.heuristicDistance = manhattanDistance(targetNode, actualTargetNode);\n\t\tdistanceToCompare = currentNode.distance + targetNode.weight + distance[0];\n\t} else {\n    distanceToCompare = currentNode.distance + targetNode.weight + distance[0];\n  }\n  if (distanceToCompare < targetNode.distance) {\n    targetNode.distance = distanceToCompare;\n    targetNode.previousNode = currentNode;\n    targetNode.path = distance[1];\n\t\ttargetNode.direction = distance[2];\n\t\tif(name === \"aStar\") {\n\t\t\ttargetNode.totalDistance = targetNode.distance + targetNode.heuristicDistance;\n\t\t}\n  }\n}\n\nfunction getNeighbors(node, grid) {\n\tconst neighbors = [];\n\tconst {col, row} = node;\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\treturn neighbors.filter(neighbor => neighbor.stutus !== \"visited\");\n}\n\n\nfunction getDistance(nodeOne, nodeTwo) {\n  let x1 = nodeOne.row;\n  let y1 = nodeOne.col;\n  let x2 = nodeTwo.row;\n  let y2 = nodeTwo.col;\n\tif (x2 < x1 && y1 === y2) {\n    if (nodeOne.direction === \"up\") {\n      return [1, [\"f\"], \"up\"];\n    } else if (nodeOne.direction === \"right\") {\n      return [2, [\"l\", \"f\"], \"up\"];\n    } else if (nodeOne.direction === \"left\") {\n      return [2, [\"r\", \"f\"], \"up\"];\n    } else if (nodeOne.direction === \"down\") {\n      return [3, [\"r\", \"r\", \"f\"], \"up\"];\n    } else if (nodeOne.direction === \"up-right\") {\n      return [1.5, null, \"up\"];\n    } else if (nodeOne.direction === \"down-right\") {\n      return [2.5, null, \"up\"];\n    } else if (nodeOne.direction === \"up-left\") {\n      return [1.5, null, \"up\"];\n    } else if (nodeOne.direction === \"down-left\") {\n      return [2.5, null, \"up\"];\n    }\n  } else if (x2 > x1 && y1 === y2) {\n    if (nodeOne.direction === \"up\") {\n      return [3, [\"r\", \"r\", \"f\"], \"down\"];\n    } else if (nodeOne.direction === \"right\") {\n      return [2, [\"r\", \"f\"], \"down\"];\n    } else if (nodeOne.direction === \"left\") {\n      return [2, [\"l\", \"f\"], \"down\"];\n    } else if (nodeOne.direction === \"down\") {\n      return [1, [\"f\"], \"down\"];\n    } else if (nodeOne.direction === \"up-right\") {\n      return [2.5, null, \"down\"];\n    } else if (nodeOne.direction === \"down-right\") {\n      return [1.5, null, \"down\"];\n    } else if (nodeOne.direction === \"up-left\") {\n      return [2.5, null, \"down\"];\n    } else if (nodeOne.direction === \"down-left\") {\n      return [1.5, null, \"down\"];\n    }\n  }\n  if (y2 < y1 && x1 === x2) {\n    if (nodeOne.direction === \"up\") {\n      return [2, [\"l\", \"f\"], \"left\"];\n    } else if (nodeOne.direction === \"right\") {\n      return [3, [\"l\", \"l\", \"f\"], \"left\"];\n    } else if (nodeOne.direction === \"left\") {\n      return [1, [\"f\"], \"left\"];\n    } else if (nodeOne.direction === \"down\") {\n      return [2, [\"r\", \"f\"], \"left\"];\n    } else if (nodeOne.direction === \"up-right\") {\n      return [2.5, null, \"left\"];\n    } else if (nodeOne.direction === \"down-right\") {\n      return [2.5, null, \"left\"];\n    } else if (nodeOne.direction === \"up-left\") {\n      return [1.5, null, \"left\"];\n    } else if (nodeOne.direction === \"down-left\") {\n      return [1.5, null, \"left\"];\n    }\n  } else if (y2 > y1 && x1 === x2) {\n    if (nodeOne.direction === \"up\") {\n      return [2, [\"r\", \"f\"], \"right\"];\n    } else if (nodeOne.direction === \"right\") {\n      return [1, [\"f\"], \"right\"];\n    } else if (nodeOne.direction === \"left\") {\n      return [3, [\"r\", \"r\", \"f\"], \"right\"];\n    } else if (nodeOne.direction === \"down\") {\n      return [2, [\"l\", \"f\"], \"right\"];\n    } else if (nodeOne.direction === \"up-right\") {\n      return [1.5, null, \"right\"];\n    } else if (nodeOne.direction === \"down-right\") {\n      return [1.5, null, \"right\"];\n    } else if (nodeOne.direction === \"up-left\") {\n      return [2.5, null, \"right\"];\n    } else if (nodeOne.direction === \"down-left\") {\n      return [2.5, null, \"right\"];\n    }\n  } \n}\n\nfunction manhattanDistance(nodeOne, nodeTwo) {\n  let nodeOneCoordinates = [nodeOne.row, nodeOne.col];\n  let nodeTwoCoordinates = [nodeTwo.row, nodeTwo.col]\n  let xChange = Math.abs(nodeOneCoordinates[0] - nodeTwoCoordinates[0]);\n  let yChange = Math.abs(nodeOneCoordinates[1] - nodeTwoCoordinates[1]);\n  return (xChange + yChange);\n}","export function randomMaze(grid, nodesToAnimate, type) {\n\tfor(let i=0; i<grid.length; i++) {\n\t\tfor(let j=0; j<grid[0].length; j++) {\n\t\t\tlet random = Math.random();\n\t\t\tlet currentNode = grid[i][j];\n\t\t\tlet reservedStatus = [\"start\", \"finish\"];\n\t\t\tlet randomTwo = type === \"wall\" ? 0.25 : 0.35;\n\t\t\tif (random < randomTwo && !reservedStatus.includes(currentNode.status)) {\n\t\t\t\tnodesToAnimate.push(currentNode);\n\t\t\t\tif (type === \"wall\") {\n\t\t\t\t\t// currentNode.status = \"wall\";\n\t\t\t\t\tcurrentNode.weight = 0;\n\t\t\t\t} else if (type === \"weight\") {\n\t\t\t\t\t// currentNode.status = \"default\";  // should be \"weight\"; left for later implementation\n\t\t\t\t\tcurrentNode.weight = 15;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function recursiveDivisionMaze(grid, rowStart, rowEnd, colStart, colEnd, orientation, surroundingWalls, nodesToAnimate, type) {\n  if (rowEnd < rowStart || colEnd < colStart) {\n    return;\n\t}\n\n\tlet reservedStatus = [\"start\", \"finish\"];\n\tfunction converNodeToType(node) {\n\t\tif(reservedStatus.includes(node.status)) return;\n\t\tnodesToAnimate.push(node);\n\t\tif (type === \"wall\") {\n\t\t\t// node.status = \"wall\";\n\t\t\tnode.weight = 0;\n\t\t} else if (type === \"weight\") {\n\t\t\t// node.status = \"default\";  // should be \"weight\"; left for later implementation\n\t\t\tnode.weight = 15;\n\t\t}\n\t}\n\n  if (!surroundingWalls) {\n\t\tlet i, j;\n\t\t//First row\n\t\tfor(j=0; j<grid[0].length; j++) {\n\t\t\ti = 0;\n\t\t\tconverNodeToType(grid[i][j]);\n\t\t}\n\t\t//Last row\n\t\tfor(j=0; j<grid[0].length; j++) {\n\t\t\ti = grid.length-1;\n\t\t\tconverNodeToType(grid[i][j]);\n\t\t}\n\t\t//First column\n\t\tfor(i=1; i<grid.length-1; i++) {\n\t\t\tj = 0;\n\t\t\tconverNodeToType(grid[i][j]);\n\t\t}\n\t\t//Last column\n\t\tfor(i=1; i<grid.length-1; i++) {\n\t\t\tj = grid[0].length-1;\n\t\t\tconverNodeToType(grid[i][j]);\n\t\t}\n    surroundingWalls = true;\n  }\n  if (orientation === \"horizontal\") {\n    let possibleRows = [];\n    for (let number = rowStart; number <= rowEnd; number += 2) {\n      possibleRows.push(number);\n    }\n    let possibleCols = [];\n    for (let number = colStart - 1; number <= colEnd + 1; number += 2) {\n      possibleCols.push(number);\n    }\n    let randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n    let randomColIndex = Math.floor(Math.random() * possibleCols.length);\n    let currentRow = possibleRows[randomRowIndex];\n\t\tlet colRandom = possibleCols[randomColIndex];\n\t\t\n\t\tlet i = currentRow, j;\n\t\tfor(j=colStart-1; j<=colEnd+1; j++) {\n\t\t\tif(j !== colRandom) {\n\t\t\t\tconverNodeToType(grid[i][j]);\n\t\t\t}\n\t\t}\n    if (currentRow - 2 - rowStart > colEnd - colStart) {\n      recursiveDivisionMaze(grid, rowStart, currentRow - 2, colStart, colEnd, orientation, surroundingWalls, nodesToAnimate, type);\n    } else {\n      recursiveDivisionMaze(grid, rowStart, currentRow - 2, colStart, colEnd, \"vertical\", surroundingWalls, nodesToAnimate, type);\n    }\n    if (rowEnd - (currentRow + 2) > colEnd - colStart) {\n      recursiveDivisionMaze(grid, currentRow + 2, rowEnd, colStart, colEnd, orientation, surroundingWalls, nodesToAnimate, type);\n    } else {\n      recursiveDivisionMaze(grid, currentRow + 2, rowEnd, colStart, colEnd, \"vertical\", surroundingWalls, nodesToAnimate, type);\n    }\n  } else {\n    let possibleCols = [];\n    for (let number = colStart; number <= colEnd; number += 2) {\n      possibleCols.push(number);\n    }\n    let possibleRows = [];\n    for (let number = rowStart - 1; number <= rowEnd + 1; number += 2) {\n      possibleRows.push(number);\n    }\n    let randomColIndex = Math.floor(Math.random() * possibleCols.length);\n    let randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n    let currentCol = possibleCols[randomColIndex];\n\t\tlet rowRandom = possibleRows[randomRowIndex];\n\n\t\tlet i, j = currentCol;\n\t\tfor(i=rowStart-1; i<=rowEnd+1; i++) {\n\t\t\tif(i !== rowRandom) {\n\t\t\t\tconverNodeToType(grid[i][j]);\n\t\t\t}\n\t\t}\n    if (rowEnd - rowStart > currentCol - 2 - colStart) {\n      recursiveDivisionMaze(grid, rowStart, rowEnd, colStart, currentCol - 2, \"horizontal\", surroundingWalls, nodesToAnimate, type);\n    } else {\n      recursiveDivisionMaze(grid, rowStart, rowEnd, colStart, currentCol - 2, orientation, surroundingWalls, nodesToAnimate, type);\n    }\n    if (rowEnd - rowStart > colEnd - (currentCol + 2)) {\n      recursiveDivisionMaze(grid, rowStart, rowEnd, currentCol + 2, colEnd, \"horizontal\", surroundingWalls, nodesToAnimate, type);\n    } else {\n      recursiveDivisionMaze(grid, rowStart, rowEnd, currentCol + 2, colEnd, orientation, surroundingWalls, nodesToAnimate, type);\n    }\n\t}\n};","import React, { useState, useRef, useEffect, useMemo, Suspense } from \"react\";\nimport * as THREE from \"three\";\nimport Box from \"./Models/box\";\nimport Building from \"./Models/building\";\nimport road from \"./textures/road_texture.jpg\";\nimport { MODEL_TO_DISPLAY } from \"../Constant/constant\";\nimport {\n  tweenToColor,\n  getNodesInShortestPathOrder,\n} from \"./algorithms/helpers\";\nimport TWEEN from \"@tweenjs/tween.js\";\nimport { weightedSearchAlgorithm } from \"./algorithms/weightedSearchAlgorithm.js\";\nimport { unweightedSearchAlgorithm } from \"./algorithms/unweightedSearchAlgorithm.js\";\nimport { randomMaze, recursiveDivisionMaze } from \"./algorithms/mazeAlgorithms\";\nimport { useThree } from \"react-three-fiber\";\nimport { SignalCellularNullOutlined } from \"@material-ui/icons\";\nconst changeOnesPlaceTo5 = (number) => {\n  return Math.floor(number / 10) * 10 + 5;\n};\nfunction Grid(props) {\n  let groundMaterial;\n  let groundMesh;\n  let mouseDownX = 0;\n  let mouseDownY = 0;\n  let previousHoverNodeId;\n  let currentHoverNodeId;\n\n  let mouseIsUp = true;\n\n  //const [mouseIsUp, setMouseIsUp] = useState(true);\n  const GRID_SIZE = props.gridDimensions; //to be global declared\n  const PHYSICAL_GRID_SIZE = 10;\n  var WALL_Y_ELEVATION = MODEL_TO_DISPLAY === \"BUILDING\" ? 0 : 10;\n  const [groundGeometry, setGroundGeometry] = useState(\n    new THREE.PlaneGeometry(\n      GRID_SIZE * 10,\n      GRID_SIZE * 10,\n      GRID_SIZE,\n      GRID_SIZE\n    )\n  );\n\n  //const [runState, setRunState] = useState(props.worldProperties.runState);\n  const selectedAlgorithm = props.selectedAlgorithm;\n  const selectedMazeAlgorithm = props.selectedMazeAlgorithm;\n  const runState = props.worldProperties.runState;\n  const clearTheWalls = props.worldProperties.clearWalls; //rename this variable\n  const clearThePath = props.worldProperties.clearPath; // rename this variable too\n  const algorithmSpeed = props.algorithmSpeed;\n\n  const applyingSettings = props.applyingSettings;\n\n  const visualizeThePolicy = props.visualizeOptimalPolicy;\n  //const settingsConfig = props.settingsConfig;\n\n  //groundGeometry.rotateX(-Math.PI / 2)\n\n  const { camera } = useThree();\n  const [blocks, setBlocks] = useState([]);\n\n  useEffect(() => {\n    if (props.applyingSettings) {\n      resetTerrainConfig();\n    }\n    if (props.visualizeOptimalPolicy) {\n      calculateOptimalPolicy();\n      animateOptimalPolicy();\n      props.finishedOptimalPolicy();\n    }\n  }, [applyingSettings, visualizeThePolicy]);\n\n  useEffect(() => {\n    /*if( props.applyingSettings=== true){\n      resetTerrainConfig();\n    }*/\n    if (props.worldProperties.runState === true) {\n      visualizeAlgorithm();\n    } else if (props.worldProperties.clearWalls === true) {\n      clearWalls();\n    } else if (props.worldProperties.clearPath === true) {\n      clearPath();\n    } else if (props.selectedMazeAlgorithm === \"randomMaze\") {\n      clearPath();\n      let nodesToAnimate = [];\n      randomMaze(terrain.grid, nodesToAnimate, \"wall\");\n      animateMaze(nodesToAnimate, \"wall\", GRID_SIZE);\n    } else if (props.selectedMazeAlgorithm === \"recursiveDivision\") {\n      clearPath();\n      let nodesToAnimate = [];\n      recursiveDivisionMaze(\n        terrain.grid,\n        2,\n        terrain.grid.length - 3,\n        2,\n        terrain.grid.length - 3,\n        \"horizontal\",\n        false,\n        nodesToAnimate,\n        \"wall\"\n      );\n\n      animateMaze(nodesToAnimate, \"wall\", GRID_SIZE);\n    }\n    console.log(algorithmSpeed);\n  }, [runState, clearTheWalls, clearThePath, selectedMazeAlgorithm]);\n\n  const loader = useMemo(\n    () =>\n      new THREE.TextureLoader().load(road, function (texture) {\n        texture.wrapS = THREE.RepeatWrapping;\n        texture.wrapT = THREE.RepeatWrapping;\n        texture.repeat.x = GRID_SIZE;\n        texture.repeat.y = GRID_SIZE;\n        groundMaterial = new THREE.MeshLambertMaterial({\n          map: texture,\n          side: THREE.FrontSide,\n          vertexColors: THREE.FaceColors,\n        });\n        groundMesh = new THREE.Mesh(groundGeometry, groundMaterial);\n        groundMesh.receiveShadow = true;\n      }),\n    [road]\n  );\n\n  groundMaterial = new THREE.MeshLambertMaterial({\n    map: loader,\n    side: THREE.FrontSide,\n    vertexColors: THREE.FaceColors,\n  });\n\n  const mesh = useRef(null);\n\n  const [terrain, setTerrain] = useState({\n    grid: initializeGrid(),\n    states: initStates(),\n    q_table: Array(props.worldProperties.rows)\n      .fill()\n      .map(() => Array(props.worldProperties.cols).fill(0)),\n    records: [],\n    optimalPolicy: [],\n    actions: { left: [0, -1], down: [1, 0], right: [0, 1], up: [-1, 0] },\n    //visits: Array(props.worldProperties.rows).fill().map(() => Array(props.worldProperties.cols).fill(0)),\n    discountFactor: 0.8,\n    alpha: 0.1,\n    start: [props.settingsConfig.startRow, props.settingsConfig.startCol],\n    finish: [props.settingsConfig.finishRow, props.settingsConfig.finishCol],\n  });\n\n  function initializeGrid() {\n    let tempGrid = [];\n    for (let i = 0; i < GRID_SIZE; i++) {\n      let currentRow = [];\n      for (let j = 0; j < GRID_SIZE; j++) {\n        let node = createNode(i, j);\n        currentRow.push(node);\n      }\n      tempGrid.push(currentRow);\n    }\n    /*var vertices = new Float32Array(5400).fill(0);\n\n    groundGeometry.setAttribute('color', new THREE.Float32BufferAttribute( vertices,3) );\n    vertices[0] = 0\n    vertices[1]= 1\n    vertices[2]= 0\n\n    \n\n    console.log(groundGeometry.getAttribute('color'))\n    const tween1 = new TWEEN.Tween(groundGeometry.getAttribute('color'))\n                    .to(new THREE.Float32BufferAttribute( vertices,2) ,9000)\n\n    tween1.start()\n\n    tween1.onUpdate(function (object: THREE.BufferAttribute | THREE.InterleavedBufferAttribute, elapsed: number){\n      groundGeometry.setAttribute('color',object)\n    })\n    \n   \n    //console.log(vertices)\n    groundGeometry.setAttribute('color', new THREE.Float32BufferAttribute( vertices,2) );*/\n\n    //setState(tempStateGrid)\n    renderLoop();\n    return tempGrid;\n  }\n\n  function createNode(row, col) {\n    let status = \"default\";\n    let faces = {};\n\n    let faceIndex = row * 2 * props.worldProperties.cols + col * 2;\n    //console.log(groundGeometry)\n\n    faces[1] = groundGeometry.faces[faceIndex];\n\n    faceIndex = faceIndex % 2 === 0 ? faceIndex + 1 : faceIndex - 1;\n    faces[2] = groundGeometry.faces[faceIndex];\n\n    if (\n      row === props.worldProperties.start.row &&\n      col === props.worldProperties.start.col\n    ) {\n      status = \"start\";\n    } else if (\n      row === props.worldProperties.finish.row &&\n      col === props.worldProperties.finish.col\n    ) {\n      status = \"finish\";\n    }\n    const positionVectorX = (col - GRID_SIZE / 2) * PHYSICAL_GRID_SIZE;\n\n    const positionVectorZ = (row - GRID_SIZE / 2) * PHYSICAL_GRID_SIZE;\n\n    let node = {\n      id: row * props.worldProperties.cols + col,\n      row: row,\n      col: col,\n      faces: faces,\n      status: status,\n      distance: Infinity,\n      totalDistance: Infinity,\n      heuristicDistance: null,\n      direction: null,\n      weight: 0,\n      qValue: 0,\n      reward: 0,\n      visits: 0,\n      onceSpecial: false,\n      previousNode: null,\n      posX: positionVectorX,\n      posY: positionVectorZ,\n      posXRounded: changeOnesPlaceTo5(positionVectorX),\n      posZRounded: changeOnesPlaceTo5(positionVectorZ),\n    };\n    if (status === \"start\") {\n      node.onceSpecial = true;\n      tweenToColor(node, groundGeometry, [props.worldProperties.colors.start]);\n    } else if (status === \"finish\") {\n      node.reward = 100;\n      node.onceSpecial = true;\n      tweenToColor(node, groundGeometry, [props.worldProperties.colors.finish]);\n    }\n    return node;\n  }\n  function initStates() {\n    let tempStateGrid = [];\n    for (let row = 0; row < props.worldProperties.rows; row++) {\n      for (let col = 0; col < props.worldProperties.cols; col++) {\n        tempStateGrid.push([row, col]);\n      }\n    }\n    //console.log(tempStateGrid)\n    return tempStateGrid;\n  }\n\n  function renderLoop() {\n    window.requestAnimationFrame(renderLoop);\n    //if(props.resetStatus){\n    hoverLoop();\n    // }\n    TWEEN.update();\n  }\n\n  function hoverLoop() {\n    if (mouseIsUp || currentHoverNodeId === previousHoverNodeId) {\n      return;\n    } else {\n      previousHoverNodeId = currentHoverNodeId;\n      let nodeRow = Math.floor(currentHoverNodeId / props.worldProperties.rows);\n      let nodeCol = currentHoverNodeId % props.worldProperties.cols;\n      if (\n        (nodeRow === props.worldProperties.start.row &&\n          nodeCol === props.worldProperties.start.col) ||\n        (nodeRow === props.worldProperties.finish.row &&\n          nodeCol === props.worldProperties.finish.col)\n      ) {\n        return;\n      } else if (terrain.grid[nodeRow][nodeCol].status === \"wall\") {\n        RemoveWallBlockByCoordinates(\n          terrain.grid[nodeRow][nodeCol].posXRounded,\n          terrain.grid[nodeRow][nodeCol].posZRounded\n        );\n        terrain.grid[nodeRow][nodeCol].status = \"default\";\n        terrain.grid[nodeRow][nodeCol].reward = 0;\n        terrain.grid[nodeRow][nodeCol].visits = 0;\n        tweenToColor(terrain.grid[nodeRow][nodeCol], groundGeometry, [\n          props.worldProperties.colors.default,\n        ]);\n      } else {\n        AddWallBlockByCoordinates(\n          terrain.grid[nodeRow][nodeCol].posXRounded,\n          terrain.grid[nodeRow][nodeCol].posZRounded\n        );\n        terrain.grid[nodeRow][nodeCol].status = \"wall\";\n        terrain.grid[nodeRow][nodeCol].visits = -1;\n        terrain.grid[nodeRow][nodeCol].reward = -100;\n        tweenToColor(terrain.grid[nodeRow][nodeCol], groundGeometry, [\n          props.worldProperties.colors.wall,\n        ]);\n      }\n    }\n    //get coordinates of node i just clicked on\n  }\n\n  useEffect(() => {\n    console.log(\"Updating blocks\");\n    console.log(blocks);\n  }, [blocks]);\n\n  const AddWallBlockByVector = (vector) => {\n    const pos = [vector.x, 2, vector.z];\n    setBlocks([...blocks, { pos, visible: true }]);\n  };\n\n  const AddWallBlockByCoordinates = (x, z) => {\n    const pos = [x, WALL_Y_ELEVATION, z];\n    setBlocks([...blocks, { pos, visible: true }]);\n  };\n\n  const RemoveWallBlockByCoordinates = (x, z) => {\n    let oldBlocks = [...blocks];\n    oldBlocks.map((block) => {\n      if (block.pos[0] === x && block.pos[2] === z) {\n        return (block.visible = false);\n      }\n    });\n    setBlocks(oldBlocks);\n  };\n\n  function mouseUpHandler(event) {\n    if (mouseDownX !== event.clientX || mouseDownY !== event.clientY) {\n      return;\n    } else {\n      let nodeId = findNodeId(event.faceIndex);\n      if (\n        (nodeId.nodeRow === props.worldProperties.start.row &&\n          nodeId.nodeCol === props.worldProperties.start.col) ||\n        (nodeId.nodeRow === props.worldProperties.finish.row &&\n          nodeId.nodeCol === props.worldProperties.finish.col)\n      ) {\n        return;\n      } else if (\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].status === \"wall\"\n      ) {\n        // RemoveWallBlock(event.intersections[0].point);\n        RemoveWallBlockByCoordinates(\n          terrain.grid[nodeId.nodeRow][nodeId.nodeCol].posXRounded,\n          terrain.grid[nodeId.nodeRow][nodeId.nodeCol].posZRounded\n        );\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].reward = 0;\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].status = \"default\";\n        tweenToColor(\n          terrain.grid[nodeId.nodeRow][nodeId.nodeCol],\n          groundGeometry,\n          [props.worldProperties.colors.default]\n        );\n        //console.log(terrain.grid[nodeId.nodeRow][nodeId.nodeCol]);\n      } else {\n        // AddWallBlockByVector(event.intersections[0].point);\n\n        AddWallBlockByCoordinates(\n          terrain.grid[nodeId.nodeRow][nodeId.nodeCol].posXRounded,\n          terrain.grid[nodeId.nodeRow][nodeId.nodeCol].posZRounded\n        );\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].reward = -100;\n        terrain.grid[nodeId.nodeRow][nodeId.nodeCol].status = \"wall\";\n        tweenToColor(\n          terrain.grid[nodeId.nodeRow][nodeId.nodeCol],\n          groundGeometry,\n          [props.worldProperties.colors.wall]\n        );\n        //console.log(terrain.grid[nodeId.nodeRow][nodeId.nodeCol]);\n      }\n      //console.log(terrain.grid)\n    }\n  }\n\n  function findNodeId(faceIndex) {\n    let linearIndex = Math.floor(faceIndex / 2);\n    return {\n      nodeRow: Math.floor(linearIndex / props.worldProperties.rows),\n      nodeCol: linearIndex % props.worldProperties.cols,\n    };\n  }\n  function mouseDownHandler(event) {\n    mouseDownX = event.clientX; //set X and Y mouse coordinates when mouseDown\n    mouseDownY = event.clientY;\n  }\n\n  function visualizeAlgorithm() {\n    clearPath();\n    let nodesToAnimate = [];\n    let processedSuccessfuly;\n    const startNode =\n      terrain.grid[props.worldProperties.start.row][\n        props.worldProperties.start.col\n      ];\n    const finishNode =\n      terrain.grid[props.worldProperties.finish.row][\n        props.worldProperties.finish.col\n      ];\n    if (selectedAlgorithm.type === \"weighted\") {\n      processedSuccessfuly = weightedSearchAlgorithm(\n        terrain.grid,\n        startNode,\n        finishNode,\n        nodesToAnimate,\n        selectedAlgorithm.algorithm,\n        selectedAlgorithm.heuristic\n      );\n      console.log(processedSuccessfuly);\n    } else {\n      processedSuccessfuly = unweightedSearchAlgorithm(\n        terrain.grid,\n        startNode,\n        finishNode,\n        nodesToAnimate,\n        selectedAlgorithm.algorithm\n      );\n    }\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    //add conditions for unweighted and no paths found\n    //console.log(algorithmSpeed + \" is the speed were using\")\n    animateAlgorithm(nodesToAnimate, nodesInShortestPathOrder, algorithmSpeed);\n  }\n  function animateAlgorithm(\n    visitedNodesInOrder,\n    nodesInShortestPathOrder,\n    timerDelay\n  ) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder, 5 * timerDelay);\n        }, timerDelay * i);\n        return;\n      }\n      if (\n        (visitedNodesInOrder[i].row === props.worldProperties.start.row &&\n          visitedNodesInOrder[i].col === props.worldProperties.start.col) ||\n        (visitedNodesInOrder[i].row === props.worldProperties.finish.row &&\n          visitedNodesInOrder[i].col === props.worldProperties.finish.col)\n      ) {\n        continue;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (!node) return;\n        tweenToColor(\n          node,\n          groundGeometry,\n          [\n            { r: 1.0, g: 0.321, b: 0.784 },\n            props.worldProperties.colors.visited,\n          ],\n          GRID_SIZE * 10,\n          { position: false }\n        );\n      }, timerDelay * i);\n    }\n  }\n  function animateShortestPath(nodesInShortestPathOrder, timerDelay) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        tweenToColor(\n          node,\n          groundGeometry,\n          [props.worldProperties.colors.path],\n          undefined,\n          {\n            position: false,\n          }\n        );\n        if (i === nodesInShortestPathOrder.length - 1) {\n        }\n      }, timerDelay * i);\n    }\n    props.updateRunState(false);\n    //console.log(terrain.grid[5][5]);\n  }\n\n  function animateOptimalPolicy() {\n    for (let i = 2; i < terrain.optimalPolicy.length; i++) {\n      let headRow = terrain.optimalPolicy[i][0];\n      let headCol = terrain.optimalPolicy[i][1];\n      //let torsoRow = terrain.optimalPolicy[i-1][0];\n      //let torsoCol = terrain.optimalPolicy[i-1][1];\n      let tailRow = terrain.optimalPolicy[i - 1][0];\n      let tailCol = terrain.optimalPolicy[i - 1][1];\n\n      const head = terrain.grid[headRow][headCol];\n      //const torso = terrain.grid[torsoRow][torsoCol];\n      const tail = terrain.grid[tailRow][tailCol];\n      if (head.status === \"start\" || tail.status == \"start\") {\n        continue;\n      }\n\n      setTimeout(() => {\n        if (head.status === \"finish\") return;\n        //terrain.grid[row][col].status = visited;\n\n        //setTimeout(() => {\n        //tweenToColor(tail, groundGeometry, [props.worldProperties.colors.path], undefined,{position: false});\n        //}, i*props.algorithmSpeed);\n\n        tweenToColor(\n          tail,\n          groundGeometry,\n          [props.worldProperties.colors.path],\n          undefined,\n          { position: false }\n        );\n        tweenToColor(head, groundGeometry, [{ r: 0, g: 0, b: 0 }], undefined, {\n          position: false,\n        });\n        //tweenToColor(torso, groundGeometry, [{r: 0, g: 0, b: 0}], undefined,{position: false});\n      }, 5 * i * props.algorithmSpeed);\n    }\n  }\n\n  function chooseAction(currentState, e_greedy) {\n    var rwc = require(\"random-weighted-choice\");\n    let actionOptions = [\n      { weight: e_greedy * 10, id: \"true\" },\n      { weight: 10 * (1 - e_greedy), id: \"false\" },\n    ];\n    let chosenOption = rwc(actionOptions);\n    let takingRandomAction = chosenOption === \"true\"; //true or false;\n    let actions = [\"left\", \"down\", \"right\", \"up\"];\n\n    if (takingRandomAction) {\n      //console.log(\"Taking random action\");\n      //let random_index = random.randint(0,len(actions) - 1)\n      while (true) {\n        let randomIndex = Math.floor(Math.random() * actions.length);\n        let selectedAction = actions[randomIndex];\n        let actionChange = terrain.actions[selectedAction];\n        if (\n          isValidState([\n            actionChange[0] + currentState[0],\n            actionChange[1] + currentState[1],\n          ])\n        ) {\n          //console.log(\"When action is random action is: \" + selectedAction)\n          return selectedAction;\n        }\n      }\n    } else {\n      //console.log(\"Taking greedy action\");\n      //let policyCandidates = new WeakMap();\n      let policyCandidates = {};\n      for (let action in terrain.actions) {\n        let nextState = [\n          terrain.actions[action][0] + currentState[0],\n          terrain.actions[action][1] + currentState[1],\n        ];\n        //console.log(nextState)\n        if (isValidState(nextState)) {\n          //console.log(terrain.q_table);\n          policyCandidates[nextState] =\n            terrain.q_table[nextState[0]][nextState[1]];\n          //policyCandidates.set(nextState,terrain.q_table[nextState[1]][nextState[0]]);\n        }\n      }\n      //let maxState = max(policy_candidates, key=policy_candidates.get)\n      let maxQValue = Number(\n        Object.keys(policyCandidates).reduce(\n          (a, v) => Math.max(a, policyCandidates[v]),\n          -Infinity\n        )\n      );\n      let maxState = Object.keys(policyCandidates).filter(\n        (v) => policyCandidates[v] === maxQValue\n      );\n\n      //let maxQValue = policy_candidates[maxState]\n      let listOfMax = [];\n      for (let maxCandidate in policyCandidates) {\n        if (policyCandidates[maxCandidate] === maxQValue) {\n          let tempVals = maxCandidate.split(\",\").map(Number);\n          listOfMax.push(tempVals);\n        }\n      }\n      let randomIndex = Math.floor(Math.random() * listOfMax.length);\n      maxState = listOfMax[randomIndex];\n      //console.log(listOfMax)\n      //Now we can use the max_state(state with the maximum q value to find the actioned perfomed to get there)\n      let action_dy = maxState[0] - currentState[0];\n      let action_dx = maxState[1] - currentState[1];\n\n      for (let action in terrain.actions) {\n        if (\n          terrain.actions[action][0] === action_dy &&\n          terrain.actions[action][1] === action_dx\n        ) {\n          return action;\n        }\n      }\n    }\n  }\n  function isValidState(nextState) {\n    //console.log(nextState)\n    if (\n      nextState[0] < 0 ||\n      nextState[0] >= props.worldProperties.rows ||\n      nextState[1] < 0 ||\n      nextState[1] >= props.worldProperties.cols\n    ) {\n      return false;\n    }\n    return true;\n  }\n  function getRecord() {\n    let record = Array(props.worldProperties.rows)\n      .fill()\n      .map(() => Array(props.worldProperties.cols).fill(0));\n    for (let i = 0; i < terrain.states.length; i++) {\n      let state = terrain.states[i];\n      record[state[0]][state[1]] = terrain.q_table[state[0]][state[1]];\n    }\n    //console.log(record)\n    return record;\n  }\n  function resetTerrainConfig() {\n    for (let row = 0; row < GRID_SIZE; row++) {\n      for (let col = 0; col < GRID_SIZE; col++) {\n        if (terrain.grid[row][col].status === \"wall\") {\n          continue;\n        }\n        if (\n          row === props.settingsConfig.startRow &&\n          col === props.settingsConfig.startCol\n        ) {\n          terrain.grid[row][col].status = \"start\";\n          terrain.grid[row][col].onceSpecial = true;\n        } else if (\n          row === props.settingsConfig.finishRow &&\n          col === props.settingsConfig.finishCol\n        ) {\n          terrain.grid[row][col].status = \"finish\";\n          terrain.grid[row][col].reward = 100;\n          terrain.grid[row][col].onceSpecial = true;\n        } else {\n          terrain.grid[row][col].status = \"default\";\n          terrain.grid[row][col].reward = 0;\n          if (terrain.grid[row][col].onceSpecial) {\n            tweenToColor(terrain.grid[row][col], groundGeometry, [\n              props.worldProperties.colors.default,\n            ]);\n          }\n        }\n      }\n    }\n    //console.log(terrain.records)\n    props.finishApplyingSettings();\n  }\n\n  function calculateOptimalPolicy() {\n    let currentState = [\n      props.settingsConfig.startRow,\n      props.settingsConfig.startCol,\n    ];\n    let policyList = [];\n    policyList.push(currentState);\n\n    while (\n      !(\n        currentState[0] === props.settingsConfig.finishRow &&\n        currentState[1] === props.settingsConfig.finishCol\n      ) &&\n      terrain.grid[currentState[0]][currentState[1]].status !== \"wall\"\n    ) {\n      let maxAction = chooseAction(currentState, props.policyCuriosity);\n      let action_dy = terrain.actions[maxAction][0];\n      let action_dx = terrain.actions[maxAction][1];\n\n      let nextState = [\n        action_dy + currentState[0],\n        action_dx + currentState[1],\n      ];\n      policyList.push(nextState);\n      currentState = nextState;\n      //console.log(maxAction);\n      //console.log(action_dy);\n    }\n    terrain.optimalPolicy = policyList;\n  }\n\n  function clearWalls() {\n    for (let i = 0; i < props.worldProperties.rows; i++) {\n      for (let j = 0; j < props.worldProperties.cols; j++) {\n        if (terrain.grid[i][j].status === \"wall\") {\n          RemoveWallBlockByCoordinates(\n            terrain.grid[i][j].posXRounded,\n            terrain.grid[i][j].posZRounded\n          );\n          terrain.grid[i][j].status = \"default\";\n          terrain.grid[i][j].reward = 0;\n          tweenToColor(terrain.grid[i][j], groundGeometry, [\n            props.worldProperties.colors.default,\n          ]);\n        }\n      }\n    }\n    props.stopClearWalls();\n  }\n  function clearPath() {\n    TWEEN.removeAll();\n    for (let i = 0; i < props.worldProperties.rows; i++) {\n      for (let j = 0; j < props.worldProperties.cols; j++) {\n        if (\n          i === props.worldProperties.start.row &&\n          j === props.worldProperties.start.col\n        ) {\n          terrain.grid[i][j].status = \"start\";\n          terrain.grid[i][j].visits = -1;\n        }\n        if (\n          i === props.worldProperties.finish.row &&\n          j === props.worldProperties.finish.col\n        ) {\n          terrain.grid[i][j].status = \"finish\";\n        }\n\n        if (\n          terrain.grid[i][j].status === \"visited\" ||\n          terrain.grid[i][j].visits > 0\n        ) {\n          terrain.grid[i][j].status = \"default\";\n          tweenToColor(terrain.grid[i][j], groundGeometry, [\n            props.worldProperties.colors.default,\n          ]);\n        }\n        terrain.grid[i][j].distance = Infinity;\n        terrain.grid[i][j].totalDistance = Infinity;\n        terrain.grid[i][j].heuristicDistance = null;\n        terrain.grid[i][j].direction = null;\n        terrain.grid[i][j].previousNode = null;\n      }\n    }\n    props.stopClearPath();\n  }\n  function animateMaze(nodesToAnimate, type, timerDelay) {\n    clearWalls();\n    for (let i = 0; i < nodesToAnimate.length; i++) {\n      let nodeRow = nodesToAnimate[i].row;\n      let nodeCol = nodesToAnimate[i].col;\n\n      //const node = nodesToAnimate[i];\n      // node.status = type;\n      terrain.grid[nodeRow][nodeCol].status = \"wall\";\n      terrain.grid[nodeRow][nodeCol].reward = -100;\n      terrain.grid[nodeRow][nodeCol].visits = -1;\n      tweenToColor(terrain.grid[nodeRow][nodeCol], groundGeometry, [\n        props.worldProperties.colors.wall,\n      ]);\n    }\n    let newblocks = [];\n    for (let i = 0; i < nodesToAnimate.length; i++) {\n      let nodeRow = nodesToAnimate[i].row;\n      let nodeCol = nodesToAnimate[i].col;\n      let posX = terrain.grid[nodeRow][nodeCol].posXRounded;\n      let posZ = terrain.grid[nodeRow][nodeCol].posZRounded;\n      newblocks.push({ pos: [posX, WALL_Y_ELEVATION, posZ], visible: true });\n    }\n    setBlocks(newblocks);\n    props.stopMazeSelection();\n  }\n\n  return (\n    <mesh ref={mesh} position={[0, 0, 0]}>\n      <gridHelper\n        args={[GRID_SIZE * 10, props.gridDimensions, 0x5c78bd, 0x5c78bd]}\n      />\n      <Suspense fallback={null}>\n        {blocks &&\n          blocks.length > 0 &&\n          blocks.map((block, index) => {\n            if (MODEL_TO_DISPLAY === \"BUILDING\") {\n              return (\n                block.visible && <Building position={block.pos} key={index} />\n              );\n            } else {\n              return block.visible && <Box position={block.pos} key={index} />;\n            }\n          })}\n      </Suspense>\n\n      <mesh\n        rotation={[-Math.PI / 2, 0, 0]}\n        position={[0, -0.1, 0]}\n        receiveShadow={true}\n        onPointerDown={(e) => {\n          mouseIsUp = false;\n          mouseDownHandler(e);\n        }}\n        onPointerUp={(e) => {\n          if (props.resetStatus === true || mouseIsUp === true) {\n            mouseIsUp = true;\n          }\n          mouseUpHandler(e);\n        }}\n        onPointerMove={(e) => {\n          if (mouseIsUp === true || props.resetStatus === false) {\n            return;\n          } else if (mouseIsUp === false) {\n            currentHoverNodeId = Math.floor(e.faceIndex / 2);\n            return;\n          }\n        }}\n      >\n        <primitive attach=\"geometry\" object={groundGeometry} />\n        <primitive\n          attach=\"material\"\n          onClick={(...args) => {\n            console.log(...args);\n          }}\n          object={groundMaterial}\n        />\n      </mesh>\n      <axesHelper />\n    </mesh>\n  );\n}\n\nexport default Grid;\n","export function unweightedSearchAlgorithm(grid, start, target, nodesToAnimate, name) {\n    let structure = [start];\n    let exploredNodes = {start: true};\n    while (structure.length) {\n      let currentNode = name === \"BFS\" ? structure.shift() : structure.pop();\n      nodesToAnimate.push(currentNode);\n      if (name === \"DFS\") exploredNodes[currentNode.id] = true;\n          currentNode.status = \"visited\";\n          // Ending condition\n          if (currentNode.id === target.id) return \"success!\";\n          // Update neighbors\n      let currentNeighbors = getNeighbors(currentNode, grid, name);\n      currentNeighbors.forEach(neighbor => {\n        if (!exploredNodes[neighbor.id]) {\n          if (name === \"BFS\") exploredNodes[neighbor.id] = true;\n                  if(neighbor.id !== start.id) {\n                      neighbor.previousNode = currentNode;\n                  }\n          structure.push(neighbor);\n        }\n          });\n    }\n    return false;\n  }\n  \n  function getNeighbors(node, grid, name) {\n      const neighbors = [];\n      const {col, row} = node;\n      let neighbor;\n      if (row > 0) {\n          neighbor = grid[row - 1][col];\n          if (name === \"BFS\") {\n              neighbors.push(neighbor);\n          } else {\n              neighbors.unshift(neighbor);\n          }\n      }\n      if (row < grid.length - 1) {\n          neighbor = grid[row + 1][col];\n          if (name === \"BFS\") {\n              neighbors.push(neighbor);\n          } else {\n              neighbors.unshift(neighbor);\n          }\n      }\n      if (col > 0) {\n          neighbor = grid[row][col - 1];\n          if (name === \"BFS\") {\n              neighbors.push(neighbor);\n          } else {\n              neighbors.unshift(neighbor);\n          }\n      }\n      if (col < grid[0].length - 1) {\n          neighbor = grid[row][col + 1];\n          if (name === \"BFS\") {\n              neighbors.push(neighbor);\n          } else {\n              neighbors.unshift(neighbor);\n          }\n      }\n      return neighbors.filter(neighbor => neighbor.stutus !== \"visited\");\n  }","import React from 'react'\n\nfunction Floor() {\n    return (\n        <mesh rotation={[-Math.PI /2, 0, 0]} position={[0, -3, -5]}>\n         <planeBufferGeometry attach = 'geometry' args = {[5000, 5000, 30, 30]} />\n        <meshStandardMaterial attach = 'material' color=\"white\"/>    \n        </mesh>\n    )\n}\n\nexport default Floor\n","import { OrbitControls } from 'drei';\nimport React, {useEffect, useRef } from 'react';\nimport { useThree } from 'react-three-fiber';\nimport TWEEN from '@tweenjs/tween.js';\n\n\nfunction Controls(props) {\n    const resetStatus = props.resetStatus;\n    const {\n        camera,\n    } = useThree();\n\n    const controls = useRef();\n\n\n\n    useEffect(() => {\n        if(props.resetStatus === true){\n            resetCamera();\n        }\n    }, [resetStatus]);\n\n    function resetCamera() {\n\n            TWEEN.removeAll();\n\t\t\tnew TWEEN.Tween(camera.position)\n\t\t\t\t.to({ x: 0, y: 385, z: 0 }, 2000)\n\t\t\t\t.easing(TWEEN.Easing.Exponential.Out)\n\t\t\t\t.onComplete(() => {\n                    controls.current.update();\n\t\t\t\t})\n\t\t\t\t.start();\n                \n    } \n\n    return (\n        <OrbitControls ref = {controls} enableRotate = {!props.resetStatus}/>\n    )\n}\n\nexport default Controls\n","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgInfo(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 51,\n    height: 51,\n    viewBox: \"0 0 51 51\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"info\",\n    transform: \"translate(-24 -4)\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"bg\",\n    width: 51,\n    height: 51,\n    transform: \"translate(24 4)\",\n    fill: \"rgba(255,255,255,0)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_82\",\n    \"data-name\": \"Path 82\",\n    d: \"M32.59,22.7H22.438v4.866h2.685v20.3H32.59Z\",\n    transform: \"translate(21.741 1.766)\",\n    fill: \"#fff\",\n    stroke: \"#fff\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Ellipse_3\",\n    \"data-name\": \"Ellipse 3\",\n    transform: \"translate(45 9)\",\n    fill: \"#fff\",\n    stroke: \"#fff\",\n    strokeWidth: 2\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 5.5,\n    cy: 5.5,\n    r: 5.5,\n    stroke: \"none\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 5.5,\n    cy: 5.5,\n    r: 4.5,\n    fill: \"none\"\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgInfo);\nexport default __webpack_public_path__ + \"static/media/info.d2873f8e.svg\";\nexport { ForwardRef as ReactComponent };","var _g, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _g9, _g10, _g11, _g12, _g13, _g14, _g15;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSettings(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 392.533 392.533\",\n    style: {\n      enableBackground: \"new 0 0 392.533 392.533\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#56ACE0\"\n    },\n    d: \"M326.363,163.491c-3.168-12.671-8.21-24.76-14.933-36.008c-1.939-3.232-2.069-7.24-0.323-10.667 l18.101-34.521l-18.941-18.941l-34.521,18.101c-3.426,1.745-7.434,1.616-10.667-0.323c-11.184-6.723-23.337-11.766-36.008-14.933 c-3.685-0.905-6.659-3.685-7.758-7.37l-11.572-37.107h-26.764l-11.572,37.172c-1.164,3.62-4.073,6.4-7.758,7.37 c-12.671,3.168-24.76,8.21-36.008,14.933c-3.232,1.939-7.24,2.069-10.667,0.323L82.452,63.418L63.511,82.36l18.101,34.521 c1.745,3.426,1.616,7.434-0.323,10.667c-6.723,11.184-11.766,23.337-14.933,36.008c-0.905,3.685-3.685,6.659-7.37,7.758 l-37.172,11.572v26.764l37.172,11.572c3.62,1.164,6.4,4.073,7.37,7.758c3.168,12.671,8.21,24.824,14.933,36.008 c1.939,3.232,2.069,7.24,0.323,10.667l-18.101,34.521l18.941,18.941l34.521-18.101c3.297-1.745,7.434-1.616,10.667,0.323 c11.184,6.723,23.337,11.766,36.008,14.933c3.685,0.905,6.659,3.685,7.758,7.37l11.572,37.172h26.764l11.572-37.172 c1.164-3.62,4.073-6.4,7.758-7.37c12.671-3.168,24.824-8.21,36.008-14.933c3.232-1.939,7.24-2.069,10.667-0.323l34.521,18.101 l18.941-18.941l-18.101-34.521c-1.745-3.426-1.616-7.434,0.323-10.667c6.723-11.184,11.766-23.337,14.933-36.008 c0.905-3.685,3.685-6.659,7.37-7.758l37.172-11.572v-26.764l-37.172-11.572C330.048,170.15,327.268,167.24,326.363,163.491z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#FFC10D\"\n    },\n    d: \"M196.359,106.085c-49.713,0-90.182,40.404-90.182,90.182c0,19.846,6.594,38.141,17.455,53.075 c7.499-20.945,27.539-35.943,51.071-35.943h43.572c23.402,0,43.378,14.933,50.941,35.685c10.796-14.933,17.325-33.164,17.325-52.945 C286.541,146.554,246.072,106.085,196.359,106.085z M196.359,200.275c-22.044,0-39.952-17.907-39.952-39.952 s17.907-39.951,39.952-39.951s39.952,17.907,39.952,39.951S218.404,200.275,196.359,200.275z\"\n  }), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#FFFFFF\"\n    },\n    d: \"M217.628,235.184h-42.214c-18.23,0-33.099,14.739-33.164,32.97 c15.063,11.378,33.875,18.23,54.174,18.23c20.428,0,39.24-6.853,54.368-18.36C250.533,249.923,235.794,235.184,217.628,235.184z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#FFFFFF\"\n    },\n    d: \"M196.359,142.093c-10.02,0-18.166,8.145-18.166,18.166s8.145,18.166,18.166,18.166 s18.166-8.145,18.166-18.166C214.525,150.303,206.38,142.093,196.359,142.093z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#194F82\"\n    },\n    d: \"M196.359,120.307c-22.044,0-39.952,17.907-39.952,39.952s17.907,39.952,39.952,39.952 s39.952-17.907,39.952-39.952S218.404,120.307,196.359,120.307z M196.359,178.424c-10.02,0-18.166-8.145-18.166-18.166 s8.145-18.166,18.166-18.166s18.166,8.145,18.166,18.166S206.38,178.424,196.359,178.424z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#194F82\"\n    },\n    d: \"M384.998,164.525l-39.111-12.283c-3.103-10.602-7.37-20.881-12.671-30.513l19.006-36.331 c2.263-4.267,1.422-9.438-1.939-12.735l-30.319-30.319c-3.426-3.426-8.598-4.202-12.735-1.939L270.897,59.41 c-9.762-5.301-19.911-9.568-30.513-12.671L228.165,7.628C226.679,3.038,222.477,0,217.757,0h-42.731 c-4.784,0-8.986,3.103-10.408,7.628l-12.283,39.111c-10.602,3.103-20.881,7.37-30.513,12.671L85.491,40.404 c-4.267-2.263-9.438-1.422-12.735,1.939L42.436,72.663c-3.426,3.426-4.202,8.598-1.939,12.735l19.006,36.331 c-5.301,9.762-9.568,19.911-12.671,30.513L7.721,164.461c-4.59,1.487-7.628,5.689-7.628,10.408V217.6 c0,4.784,3.103,8.986,7.628,10.408l39.111,12.283c3.103,10.602,7.37,20.881,12.671,30.513l-19.006,36.331 c-2.263,4.267-1.422,9.438,1.939,12.735l30.319,30.319c3.426,3.426,8.598,4.202,12.735,1.939l36.331-19.006 c9.762,5.301,19.911,9.568,30.513,12.671l12.218,39.111c1.422,4.59,5.624,7.628,10.408,7.628h42.731 c4.784,0,8.986-3.103,10.408-7.628l12.218-39.111c10.602-3.103,20.881-7.37,30.513-12.671l36.331,19.006 c4.267,2.263,9.438,1.422,12.735-1.939l30.19-30.19c3.426-3.426,4.202-8.598,1.939-12.735l-19.006-36.331 c5.301-9.762,9.568-19.911,12.671-30.513l39.111-12.218c4.59-1.422,7.628-5.624,7.628-10.408v-42.731 C392.626,170.15,389.523,165.883,384.998,164.525z M370.84,209.649l-37.172,11.572c-3.62,1.164-6.4,4.073-7.37,7.758 c-3.168,12.671-8.21,24.76-14.933,36.008c-1.939,3.232-2.069,7.24-0.323,10.667l18.101,34.521l-18.941,18.941l-34.521-18.101 c-3.426-1.745-7.434-1.616-10.667,0.323c-11.184,6.723-23.337,11.766-36.008,14.933c-3.685,0.905-6.659,3.685-7.758,7.37 l-11.572,37.172h-26.764l-11.572-37.172c-1.164-3.62-4.073-6.4-7.758-7.37c-12.671-3.168-24.824-8.21-36.008-14.933 c-3.232-1.939-7.24-2.069-10.667-0.323l-34.521,18.101l-18.941-18.941l18.101-34.521c1.745-3.426,1.616-7.434-0.323-10.667 c-6.723-11.184-11.766-23.337-14.933-36.008c-0.905-3.685-3.685-6.659-7.37-7.758l-37.172-11.572v-26.764l37.172-11.572 c3.62-1.164,6.4-4.073,7.37-7.758c3.168-12.671,8.21-24.824,14.933-36.008c1.939-3.232,2.069-7.24,0.323-10.667L63.446,82.36 l18.941-18.941l34.521,18.101c3.426,1.745,7.434,1.616,10.667-0.323c11.184-6.723,23.337-11.766,36.008-14.933 c3.685-0.905,6.659-3.685,7.758-7.37l11.572-37.172h26.764l11.572,37.172c1.164,3.62,4.073,6.4,7.758,7.37 c12.671,3.168,24.76,8.21,36.008,14.933c3.232,1.939,7.24,2.069,10.667,0.323l34.521-18.101l18.941,18.941l-18.101,34.521 c-1.745,3.426-1.616,7.434,0.323,10.667c6.723,11.184,11.766,23.337,14.933,36.008c0.905,3.685,3.685,6.659,7.37,7.758 l37.172,11.572V209.649z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#194F82\"\n    },\n    d: \"M196.359,84.299c-61.737,0-111.968,50.23-111.968,111.968s50.23,111.968,111.968,111.968 s111.968-50.23,111.968-111.968S258.097,84.299,196.359,84.299z M196.295,286.384c-20.234,0.065-38.917-6.788-54.109-18.166 c0.065-18.23,14.933-32.97,33.164-32.97h42.214c18.166,0,32.905,14.61,33.164,32.776 C235.535,279.467,216.788,286.384,196.295,286.384z M269.216,249.212c-7.564-20.881-27.539-35.749-50.941-35.749h-43.572 c-23.596,0-43.507,14.998-51.071,35.943c-10.925-14.933-17.455-33.228-17.455-53.075c0-49.713,40.404-90.182,90.182-90.182 s90.182,40.404,90.182,90.117C286.541,216.049,280.077,234.279,269.216,249.212z\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null)), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", null)), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", null)), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", null)), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", null)), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", null)), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", null)), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", null)), _g9 || (_g9 = /*#__PURE__*/React.createElement(\"g\", null)), _g10 || (_g10 = /*#__PURE__*/React.createElement(\"g\", null)), _g11 || (_g11 = /*#__PURE__*/React.createElement(\"g\", null)), _g12 || (_g12 = /*#__PURE__*/React.createElement(\"g\", null)), _g13 || (_g13 = /*#__PURE__*/React.createElement(\"g\", null)), _g14 || (_g14 = /*#__PURE__*/React.createElement(\"g\", null)), _g15 || (_g15 = /*#__PURE__*/React.createElement(\"g\", null)));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSettings);\nexport default __webpack_public_path__ + \"static/media/settings.f6f014e4.svg\";\nexport { ForwardRef as ReactComponent };","import React,  { useState, useRef } from 'react'\nimport {  AwesomeButton, AwesomeButtonProgress } from 'react-awesome-button';\nimport \"react-awesome-button/dist/styles.css\";\nimport { Button, Select, MenuItem, Slider, TextField } from '@material-ui/core'\nimport { makeStyles, withStyles,} from '@material-ui/core/styles';\nimport { ReactComponent as SettingsLogo } from '../assets/settings.svg';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { green } from '@material-ui/core/colors';\n\n\n\nfunction Settings(props) {\n\n    const useStyles = makeStyles((theme) => ({\n        root: {\n          '& > *': {\n            margin: theme.spacing(1),\n            background: '#1E88E5',\n            border: 0,\n            borderRadius: 3,\n            color: 'white',\n            width: '150px',\n            height: '44px',\n            'margin-left': '10px',\n            'font-family': 'inherit',\n            'font-weight': 600,\n            'font-style': 'normal',\n            \n          },\n        },\n        slider: {\n            marginTop: '15px',\n            marginBottom: '10px',\n            width: '150px',\n            \n        },\n    }));\n    const classes = useStyles();\n\n    const muiTheme = createMuiTheme({\n        overrides:{\n          MuiSlider: {\n            thumb:{\n            color: \"black\",\n            },\n            track: {\n              color: 'green'\n            },\n            rail: {\n              color: 'black',\n              \n            }\n          }\n      },\n      breakpoints:{\n\n      }\n    });\n\n    const textBoxTheme = createMuiTheme({\n        palette: {\n          primary: green,\n        },\n    });\n    return (\n        <div className = \"settings_container\">\n            <h1 id = \"settings_title\">Visualizer Settings</h1>\n            <div id=\"divider\"></div>\n            <table>\n                <tbody>\n                    \n                    <tr>\n                        <td></td>\n                        <td>\n                            <SettingsLogo id = \"settings_icon\"/>  \n                        </td>\n                    </tr>\n                </tbody>\n        </table>\n        </div>\n    )\n}\n\nexport default Settings\n","import React, { useState, useRef } from \"react\";\nimport Grid from \"./Grid\";\nimport { Canvas } from \"react-three-fiber\";\nimport Floor from \"./Floor\";\nimport Controls from \"./Controls\";\nimport { Select, MenuItem } from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Tutorial from \"./Tutorial\";\nimport Settings from \"./Settings\";\nimport { AwesomeButton, AwesomeButtonProgress } from \"react-awesome-button\";\nimport \"react-awesome-button/dist/styles.css\";\nimport { WhatsApp } from \"@material-ui/icons\";\n\n//<OrbitControls enabled = {!worldSetup} />\nfunction World(props) {\n  let width = window.innerWidth;\n  let height = window.innerHeigh;\n  const GRID_SIZE = 20;\n\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState({}); // keeps track of the algorithm we choose\n  const [runState, setRunState] = useState(false); //when runState is true the visualizer algorithm is running\n  const [resetCamera, setResetCamera] = useState(false); //when resetCamera is true we reset the camera position\n  const [clearWalls, setClearWalls] = useState(false);\n  const [clearPath, setClearPath] = useState(false);\n  const cameraPosition = useRef([0, 275, 0]);\n  const [selectedMazeAlgorithm, setSelectedMazeAlgorithm] = useState(\"\");\n  const [algorithmSpeed, setAlgorithmSpeed] = useState(\"15\");\n  const [selected_algo_is_undefined, setAlgo] = useState(true);\n\n  const [applyingSettings, setApplyingSettings] = useState(false);\n  const [settingsConfig, setConfig] = useState({\n    epochs: 350000,\n    startRow: 5,\n    startCol: 5,\n    finishRow: 18,\n    finishCol: 19,\n    learningRate: 0.2,\n    agentCuriosity: 0.8,\n  });\n\n  const [visualizeOptimalPolicy, setVisualizeOptimalPolicy] = useState(false);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      \"& > *\": {\n        //margin: theme.spacing(1),\n        background: \"#25d366\",\n        border: 0,\n        borderRadius: 3,\n        color: \"white\",\n        width: \"150px\",\n        height: \"44px\",\n        \"margin-left\": \"10px\",\n        \"font-family\": \"inherit\",\n        \"font-weight\": 600,\n        \"font-style\": \"normal\",\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  //calling on this funciton in the child component (Grid) to update runstate in this parent\n  function updateRunState(newState) {\n    setRunState(newState);\n  }\n  function stopClearPath() {\n    setClearPath(false);\n  }\n  function stopClearWalls() {\n    setClearWalls(false);\n  }\n\n  function finishApplyingSettings() {\n    setApplyingSettings(false);\n  }\n\n  function finishedOptimalPolicy() {\n    setVisualizeOptimalPolicy(false);\n  }\n  function handleOnChange(event) {\n    if (event.target.value !== undefined) {\n      setAlgo(false);\n    }\n    if (event.target.value === undefined) {\n      setAlgo(true);\n    }\n    if (event.target.value === \"Dijkstra\") {\n      setSelectedAlgorithm({\n        algorithm: \"Dijkstra\",\n        type: \"weighted\",\n        heuristic: \"\",\n      });\n    } else if (event.target.value === \"aStar\") {\n      setSelectedAlgorithm({\n        algorithm: \"aStar\",\n        type: \"weighted\",\n        heuristic: \"poweredManhattanDistance\",\n      });\n    } else if (event.target.value === \"BFS\") {\n      setSelectedAlgorithm({\n        algorithm: \"BFS\",\n        type: \"unweighted\",\n        heuristic: \"\",\n      });\n    } else if (event.target.value === \"DFS\") {\n      setSelectedAlgorithm({\n        algorithm: \"DFS\",\n        type: \"unweighted\",\n        heuristic: \"\",\n      });\n    }\n  }\n  function updateResetStatus() {\n    setResetCamera(false);\n  }\n  function handleMazeChange(event) {\n    setSelectedMazeAlgorithm(event.target.value);\n  }\n  function stopMazeSelection() {\n    setSelectedMazeAlgorithm(\"\");\n  }\n\n  return (\n    <>\n      <div className=\"header\" align=\"center\">\n        <div className={classes.root}>\n          <Select\n            name=\"algorithms\"\n            id=\"algorithms\"\n            displayEmpty\n            onChange={(e) => handleOnChange(e)}\n          >\n            <MenuItem>Select Algorithm</MenuItem>\n            <MenuItem value=\"Dijkstra\">Dijkstra's Algorithm</MenuItem>\n            <MenuItem value=\"aStar\">A* Search</MenuItem>\n            <MenuItem value=\"BFS\">Breadth First Search</MenuItem>\n            <MenuItem value=\"DFS\">Depth First Search</MenuItem>\n          </Select>\n        </div>\n        <div className={classes.root}>\n          <Select\n            name=\"mazes\"\n            id=\"mazes\"\n            displayEmpty\n            onChange={(e) => handleMazeChange(e)}\n          >\n            <MenuItem>Select Maze</MenuItem>\n            <MenuItem value=\"randomMaze\">Random Maze</MenuItem>\n            <MenuItem value=\"recursiveDivision\">Recursive Division</MenuItem>\n          </Select>\n        </div>\n        <div id=\"visualize_btn\" className=\"header_items\">\n          <AwesomeButtonProgress\n            type={WhatsApp}\n            size=\"medium\"\n            disabled={runState || selected_algo_is_undefined}\n            loadingLabel=\"Visualizing...\"\n            resultLabel=\"Success\"\n            ripple={true}\n            action={(element, next) => {\n              setTimeout(() => {\n                next(true, \"\");\n                setRunState(true);\n              }, 1000);\n            }}\n          >\n            Visualize\n          </AwesomeButtonProgress>\n        </div>\n        <div id=\"clearPath\" className=\"header_items\">\n          <AwesomeButtonProgress\n            type=\"whatsapp\"\n            size=\"medium\"\n            disabled={runState}\n            loadingLabel=\"Clearing Path...\"\n            resultLabel=\"Path Cleared :-)\"\n            ripple={true}\n            action={(element, next) => {\n              setTimeout(() => {\n                next(true, \"\");\n                setClearPath(true);\n              }, 150);\n            }}\n          >\n            Clear Path\n          </AwesomeButtonProgress>\n        </div>\n        <div id=\"clearWalls\" className=\"header_items\">\n          <AwesomeButtonProgress\n            type=\"whatsapp\"\n            size=\"medium\"\n            disabled={runState}\n            loadingLabel=\"Clearing Walls...\"\n            resultLabel=\"Walls Cleared :-)\"\n            ripple={true}\n            action={(element, next) => {\n              setTimeout(() => {\n                next(true, \"\");\n                setClearWalls(true);\n              }, 550);\n            }}\n          >\n            Clear Walls\n          </AwesomeButtonProgress>\n        </div>\n        <div className=\"header_items\">\n          <AwesomeButton\n            type=\"whatsapp\"\n            size=\"medium\"\n            ripple={true}\n            action={(element, next) => {\n              setResetCamera(!resetCamera);\n            }}\n          >\n            Setup World\n          </AwesomeButton>\n        </div>\n        <div className={classes.root}>\n          <Select\n            name=\"algorithmSpeed\"\n            id=\"algorithmSpeed\"\n            displayEmpty\n            onChange={(e) => setAlgorithmSpeed(e.target.value)}\n          >\n            <MenuItem>Select Speed</MenuItem>\n            <MenuItem value=\"15\">Fast</MenuItem>\n            <MenuItem value=\"25\">Medium</MenuItem>\n            <MenuItem value=\"80\">Slow</MenuItem>\n          </Select>\n        </div>\n      </div>\n      {/* <Tutorial />\n      <Settings /> */}\n      <Canvas\n        colorManagement\n        camera={{\n          position: cameraPosition.current,\n          fov: 53,\n          aspect: width / height,\n          near: 1,\n          far: 5000,\n        }}\n      >\n        <ambientLight intensity={1} color={0xbbc2d0} />\n        {/*<fog attach = \"fog\" args = {[0xFFFFFF , 0, 750]}/>*/}\n        <hemisphereLight\n          color={\"hsl(0.6, 1, 0.6)\"}\n          groundColor={0x87775d}\n          intensity={0.1}\n          position={[0, 5, 0]}\n        />\n        <directionalLight\n          color={\"hsl(0.1, 1, 0.95)\"}\n          groundColor={0x87775d}\n          intensity={0.5}\n          position={[-70, 122.5, 70]}\n          castShadow={true}\n        />\n        <Grid\n          gridDimensions={GRID_SIZE}\n          updateRunState={updateRunState}\n          stopClearPath={stopClearPath}\n          stopClearWalls={stopClearWalls}\n          stopMazeSelection={stopMazeSelection}\n          finishApplyingSettings={finishApplyingSettings}\n          visualizeOptimalPolicy={visualizeOptimalPolicy}\n          finishedOptimalPolicy={finishedOptimalPolicy}\n          resetStatus={resetCamera}\n          selectedAlgorithm={selectedAlgorithm}\n          selectedMazeAlgorithm={selectedMazeAlgorithm}\n          algorithmSpeed={algorithmSpeed}\n          applyingSettings={applyingSettings}\n          settingsConfig={settingsConfig}\n          worldProperties={{\n            rows: GRID_SIZE,\n            cols: GRID_SIZE,\n            runState: runState,\n            clearPath: clearPath,\n            clearWalls: clearWalls,\n            start: {\n              row: settingsConfig.startRow,\n              col: settingsConfig.startCol,\n            },\n            finish: {\n              row: settingsConfig.finishRow,\n              col: settingsConfig.finishCol,\n            },\n            colors: {\n              start: { r: 0.329, g: 0.27, b: 0.968 },\n              finish: { r: 1, g: 0, b: 0 },\n              wall: { r: 0, g: 0, b: 0 },\n              visited: { r: 0, g: 1, b: 0 },\n              path: { r: 0.823, g: 0.254, b: 0.776 },\n              default: { r: 1, g: 1, b: 1 },\n            },\n            nodeDimensions: {\n              height: 10,\n              width: 10,\n            },\n          }}\n        />\n        <Floor />\n        <Controls\n          resetStatus={resetCamera}\n          updateResetStatus={updateResetStatus}\n        />\n      </Canvas>\n    </>\n  );\n}\n\nexport default World;\n","import React, { Suspense } from \"react\";\nimport \"./App.scss\";\nimport World from \"./components/World\";\n\nfunction App() {\n  return (\n    <>\n      <Suspense fallback={<>{\"Loading\"}</>}>\n        <World />\n      </Suspense>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={\"Loading\"}>\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}